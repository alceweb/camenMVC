@model CamenMVC.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<h2>Crea un nuovo account - Create a new account</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="well well-sm">
        <span class="label label-danger">Attenzione</span>
        <p >
            La password dovrà contenere almeno una lettera maiuscola, almeno una lettera minuscola, almeno una cifra ed almeno un carattere speciale (. , ; : $ & % ...) ed avere in totale di almeno 6 caratteri.<br /><br />
            <em>Password must have at least one uppercase letter, at least one lowercase letter,  al least one digit and at least one special character (. , ; : $ & % ...)  and have a total of at least 6 characters.</em>
        </p><br />

    </div>
    <span class="badge">Campi obbligatori *</span>
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.Email) *</span>
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = "Questo sarà anche il tuo username" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.Password) *</span>
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.ConfirmPassword) *</span>
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
        </div>
    </div>
    <hr class="hr1"/>
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.Nome) *</span>
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Nome, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.Cognome) *</span>
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Cognome, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.Indirizzo) *</span>
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Indirizzo, new { @class = "form-control", @placeholder = "Indirizzo" })
        </div>
    </div>

    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.Città) *</span>
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Città, new { @class = "form-control", @placeholder = "Città" })
        </div>
    </div>
    <div class="form-group">
        <span class="col-md-2 control-label">@Html.LabelFor(m => m.CAP) *</span>
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.CAP, new { @class = "form-control", @placeholder = "CAP" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Telefono, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Telefono, new { @class = "form-control", @placeholder = "fisso o cellulare" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Professione, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Professione, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Organizzazione, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Organizzazione, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Ruolo, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <div class="btn-group" data-toggle="buttons">
                @Html.RadioButtonFor(m => m.Ruolo, "Insegnante") Insegnante
                @Html.RadioButtonFor(m => m.Ruolo, "Studente") Studente
                @Html.RadioButtonFor(m => m.Ruolo, "Congressista") Congressista
                @Html.RadioButtonFor(m => m.Ruolo, "Socio") Socio
                @Html.RadioButtonFor(m => m.Ruolo, "Docente") Docente
                @Html.RadioButtonFor(m => m.Ruolo, "Altro", new { @checked = "checked" }) Altro
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Note, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextAreaFor(m => m.Note, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Privacy, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <h4>
                @Html.CheckBoxFor(m => m.Privacy)
                <br />Dichiaro di aver preso visione del <a href="~/Content/Documenti/36_Privacy.pdf" target="_blank"> documento della privacy</a>
            </h4>
        </div>
    </div>
        <div class="col-md-10">
            <div class="well well-sm">
                <p >
                    A registrazione avvenuta potrete accedere all’area riservata ma non vedrete nessuno dei contenuti presenti.  Entro pochi giorni riceverete una email di attivazione della registrazione, dopo di che potrete accedere alle pagine desiderate.<br /><br />
                    <em>After Registration, you will be able to access to the reserved area but you will not see any content. Whitin few days you will receive a registration confirmation email, after which you will be enabled to access the desired pages.</em>

                </p>

            </div>
        </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-success" value="Invia" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    // estensione per validare checkbox con valore true
    var defaultRangeValidator = $.validator.methods.range;
    $.validator.methods.range = function (value, element, param) {
        if (element.type === 'checkbox') {
            // se è chekced restituisco true
            return element.checked;
        } else {
            // altrimenti il default validation function
            return defaultRangeValidator.call(this, value, element, param);
        }
    }
</script>
}
